#!/usr/bin/python3

import sys
import re
import os
import datetime 
import logging as l
from path import path
from textwrap import dedent as d
from optparse import OptionParser

# Default value of base dir
BASE_DIR_DEFAULT='/mnt/usbstorage/security'

# Search pattern for date contained in individual file name
# This filename pattern is generated by motion software and is 
# specified in the motion.conf file
F_NAME_PATTERN = "-(\d\d\d\d)(\d\d)(\d\d)"

# This is the pattern for the daily directories that are auto-created
# <2 digit month>-<2 digit day>-<4 digit year> <3 letter day> <3 letter month>
# e.g. 01-03-2015 (Fri Jan 03)
DAILY_DIR_PATTERN = "(\d\d)-(\d\d)-(\d\d\d\d) \(([A-Z][a-z]{2,2} [A-Z][a-z]{2,2} \d\d)\))"

# This is the pattern for the monthly directories
# <4 digit year>-<2 digit month> (<3 letter month, lower case> <4 digit year>)
# e.g. 2015-01 (Jan 2015)
MONTH_DIR_PATTERN="(\d\d\d\d)-(\d\d) \(([A-Z][a-z]{2,2}) (\d\d\d\d)\)"

# FULLMATCH


def setup_cli():
    prog_desc="""\
            The program groups files into directories based 
            on a date field that is part of the file name. File names 
            are assumed to have a format of nn-yyyymmddnnnnnnn.ccc 
            where n is any integer, yyyy is the four digit year, 
            mm is a two digit month, dd is a two digit day, and c 
            is any character. The critical part is the -yyyymmdd which 
            is what the program attempts to match. It only matches files 
            meeting that pattern. By default the program puts matching files 
            from the base directory into daily directories.
            It was designed to organize 10's or 100's of video files 
            generated by motion software into something less cluttered.
            """
    parser = OptionParser(description=d(prog_desc))
    help_txt = """\
            Group directories by day. Creates directories in the 
            form of mm-dd-yyyy and puts existing files into 
            the proper daily directory. Will create directories if they 
            do not already exist. Will place files in month based 
            sub-directories if they exist, otherwise it will create
            a daily directly under the base directory (see -m option).
            This is the default action.
            """
    parser.add_option('', '--daily', help=d(help_txt), action='store_true', 
            dest='day_action', default=True)
    help_txt = """\
            Group daily directories by month. Creates directories in the 
            form of yyyy-mm and puts existing daily sub-directories in 
            the form of dd-mm-yyyy under the proper month. Will 
            create monthly directories if they do not already exist. Does 
            not move individual files.
            """
    parser.add_option('-m', '--monthly', help=d(help_txt), action='store_true', 
            dest='month_action', default=False)
    help_txt = """\
            Base directory. Organize files and create directories
            from this base directory. Default value is \'%default\'
            """
    parser.add_option('-b', '--base-dir', help=d(help_txt), dest='base_dir', 
            default=BASE_DIR_DEFAULT, metavar='<base directory>')
    help_txt = """\
            Log every action on every remote file to std-out. 
            """
    parser.add_option('-v', '--verbose', help=d(help_txt), 
            action='store_true', dest='verbose', default=False)
    help_txt = """\
            Surpress all output.
            """
    parser.add_option('-q', '--quiet', help=d(help_txt), action='store_true', 
            default=False, dest='quiet')
    help_txt = """\
            Debug level messages (default). Assumes -v and overrides -q.
            """
    parser.add_option('-d', '--debug', help=d(help_txt), action='store_true', 
            dest='debug')
    help_txt = """\
            Simulate. Do not perform moves, just log what the program would do
            (Implies -v).
            """
    parser.add_option('-s', '--simulate', help=d(help_txt), 
            action='store_true', dest='simulate')
    return parser


def group_by_day():

    # Filenames look like this "53-20150623160000-snapshot.jpg"
    # So the below captures the year, month and day as groups 1, 2 and 3
    # fname_m = file name match
    fname_m = re.compile(F_NAME_PATTERN)

    src_dir = path(ROOT_DIR_DEFAULT)
    for f in src_dir.files():
        print("file name {0}".format(f.name))
        m = p.search(f.name)
        if not m:
            continue
        dir_name = "{0}-{1}-{2}".format(m.group(2), m.group(3), m.group(1))
        dir_name = src_dir / dir_name
        print("dir names \n\t{0}".format(dir_name))
        if dir_name.exists():
            print("{0} exists".format(dir_name))
        else:
            dir_name.mkdir()
        new_name = dir_name / f.name
        print("Moving {0} to {1}".format(f, new_name))
        f.rename(new_name)
    return # END group_by_day


# Main logic here
if __name__ == '__main__':

    #Process the command line options
    cli_parser = setup_cli()
    (opt, args) = cli_parser.parse_args()

    # Set up logging
    if opt.debug == True: l.basicConfig(format="%(asctime)s: %(message)s",
                level=l.DEBUG)
    # If simulate is on, then verbose must be set to true
    elif opt.verbose == True or opt.simulate == True:
        l.basicConfig(format="%(message)s", level=l.INFO)
        opt.verbose = True #Does nothing if verbose is already True
    elif opt.quiet == True: l.basicConfig(level=l.NOTSET)
    else: l.basicConfig(format="%(levelname)s: %(message)s")

    # Valdiate that the base directory exists
    base_dir = path(opt.base_dir)
    if base_dir.exists(): l.debug("base_dir <{0}> exists.".format(base_dir))
    else:
        l.critical("Base directory <{0}> does not exist. Exitting.".
                format(base_dir))
        sys.exit(1)

    # First group daily files into directories

    print("here: {0}".format(opt.day_action))
    print("here: {0}".format(opt.month_action))
    
